
<% include partials/header.ejs %>
<div class="jumbotron">
    <div class="row justify-content-center text-center" style="display: flex; flex-wrap: wrap">
        <div class="col-xl-12" style="display: flex; flex-wrap: wrap">
            <div class="form-check form-switch mx-auto d-flex justify-content-center text-center">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                <label class="form-check-label" for="flexSwitchCheckDefault"></label>
            </div>
        </div>
        <div class="col-md-12" style="padding-bottom: 0.5rem;">
            
        </div>
        
        <div class="col-md-12">
            <div class="card" style="border: none;">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">Ger√§te / Nutzername:
                        <div>
                            <span> <%= USER %> </span>
                        </div>
                    </h5>
                </div>
            </div>
            <div class="card" style="border: none;">
                <div class="card-body text-center">
                    <h5 class="card-title text-center">Inferenz:
                        <div>
                            <span id="inference"> </span>
                        </div>
                    </h5>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="spinner-grow" role="status" id="sendenlive" style="visibility: hidden; color: green;">
                <span class="visually-hidden">Sende Daten...</span>
            </div>
            <div class="spinner-grow" role="status" id="sendenoffline" style="visibility: visible; color: rgb(172, 16, 16);">
                <span class="visually-hidden">Sende keine Daten</span>
            </div>
        </div>
    </div>
    <div class="row text-center" style="display: flex; flex-wrap: wrap">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body text-center">
                <h5 class="card-title text-center">Gyroscope</h5>
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">Alpha</th>
                        <th scope="col">Beta</th>
                        <th scope="col">Gamma</th>
                    </tr>
                    </thead>
                    <tbody>
                        <tr>
                        <td><span id="alpha"></span></td>
                        <td><span id="beta"></span></td>
                        <td><span id="gamma"></span></td>
                        </tr>
                    </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card text-center">
                <div class="card-body">
                <h5 class="card-title">Accelerometer</h5>
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">X</th>
                        <th scope="col">Y</th>
                        <th scope="col">Z</th>
                    </tr>
                    </thead>
                    <tbody>
                        <tr>
                        <td><span id="accel_x"></span></td>
                        <td><span id="accel_y"></span></td>
                        <td><span id="accel_z"></span></td>
                        </tr>
                    </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div id="debugger" style="height:50px; visibility: hidden;"></div>
    <div id="debugger2"  style="height:50px; visibility: hidden;"></div>
    <div id="debugger3"  style="height:50px; visibility: visible;"></div>
</div>

</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>

<script>
    var mqqt_broker_url = "<%= BROKER_URL %>"
    var mqqt_broker_port = "<%= BROKER_PORT %>"
    var username = "<%= USER %>"
    console.log(username)
    console.log("env vars to connect to mqtt: " + mqqt_broker_url + ":" + mqqt_broker_port )

    const topic = "inference/" + username
    const clientId = "FRONTENDWEBAPP"

     // Create a client instance
    client = new Paho.MQTT.Client(mqqt_broker_url, Number(mqqt_broker_port), "JSFRONTEND-" + username);

    // set callback handlers
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;

    // connect the client
    function connectMqtt() {
        try {
            client.connect({onSuccess:onConnect, useSSL: true});
            document.getElementById("debugger").innerHTML = "connection succesful"
        }
        catch (e) {
            document.getElementById("debugger").innerHTML = "connecting fails - check broker connectivity: " + e
        }
    }

    // called when the client connects
    function onConnect() {
    // Once a connection has been made, make a subscription and send a message.
        console.log("Connected!");
        client.subscribe("prediction/" + username);
        // message = new Paho.MQTT.Message('{ "d": {"key1": "value1"} }');
        // message.destinationName = topic;
        // client.send(message);
    }

    // called when the client loses its connection
    function onConnectionLost(responseObject) {
        if (responseObject.errorCode !== 0) {
            console.log("onConnectionLost:"+responseObject.errorMessage);
            document.getElementById("debugger").innerHTML = "connection lost: " + responseObject.errorMessage
            connectMqtt();
        }
    }

    // called when a message arrives
    function onMessageArrived(message) {
        document.getElementById("inference").innerHTML = message.payloadString
    }

    function disconnectMqtt() {
        try {
            client.disconnect();
            document.getElementById("debugger").innerHTML = "disconnection succesful"
        }
        catch (e) {
            document.getElementById("debugger").innerHTML = "connecting fails - check broker connectivity: " + e
        }
    }

</script>

<script>
    // IPHONE SETTINGS
    
    function iOS() {
            return [
                'iPad Simulator',
                'iPhone Simulator',
                'iPod Simulator',
                'iPad',
                'iPhone',
                'iPod'
            ].includes(navigator.platform)
            // iPad on iOS 13 detection
            || (navigator.userAgent.includes("Mac") && "ontouchend" in document)
            }
    
    function requestPermission(){
        DeviceMotionEvent.requestPermission()
        DeviceOrientationEvent.requestPermission()
        }
    
    function getAccel(){
        window.addEventListener('deviceorientation',(event_gyro) => {
            // frequency is 60Hz per default
            
            var gyro_dict_iphone = { 
                            user: username,
                            sensor: "gyroscope",
                            oa: event_gyro.alpha,
                            ob: event_gyro.beta,
                            og: event_gyro.gamma,
                            ts: event_gyro.timeStamp,  
                        };
            
            console.log(gyro_dict_iphone)
            message = new Paho.MQTT.Message(JSON.stringify(gyro_dict_iphone));
            document.getElementById("debugger").innerHTML = message;
            message.destinationName = topic;
            try {
                client.send(message);
            }
            catch (e) {
                document.getElementById("debugger").innerHTML = "sending messages fails - check broker connectivity: " + e
            }
            document.getElementById("alpha").innerHTML = gyro_dict_iphone["oa"].toFixed(2);
            document.getElementById("beta").innerHTML = gyro_dict_iphone["ob"].toFixed(2);
            document.getElementById("gamma").innerHTML = gyro_dict_iphone["og"].toFixed(2);
            });
        
        window.addEventListener('devicemotion', (event_accel) => {
            var accel_dict_iphone = { 
                            user: username,
                            sensor: "accelerometer",
                            ax: event_accel.accelerationIncludingGravity.x,
                            ay: event_accel.accelerationIncludingGravity.y,
                            az: event_accel.accelerationIncludingGravity.z,
                            ts: event_accel.timeStamp,
                        };
            
            console.log(accel_dict_iphone)
            message = new Paho.MQTT.Message(JSON.stringify(accel_dict_iphone));
            document.getElementById("debugger").innerHTML = message;
            message.destinationName = topic;
            try {
                client.send(message);
            }
            catch (e) {
                document.getElementById("debugger").innerHTML = "sending messages fails 2 - check broker connectivity: " + e
            }
            document.getElementById("accel_x").innerHTML = accel_dict_iphone["ax"].toFixed(2);
            document.getElementById("accel_y").innerHTML = accel_dict_iphone["ay"].toFixed(2);
            document.getElementById("accel_z").innerHTML = accel_dict_iphone["az"].toFixed(2);
            document.getElementById("timestamp").innerHTML = accel_dict["ts"].toFixed(2);
            
        });
    };
</script>


<script>

    //////////////////////////////////////////////
    var input = document.getElementById('flexSwitchCheckDefault');

    input.addEventListener('change',function(){
        if(this.checked) {
            if (username) {
                if (iOS() == true) {
                    console.log("iPhone DETECTED")
                    requestPermission()
                    connectMqtt();
                    getAccel();
                    document.getElementById('sendenlive').style.visibility = "visible"
                    document.getElementById('sendenoffline').style.visibility = "hidden"
                } else {
                    connectMqtt();
                    console.log("not an iPhone")
                    console.log("aktiviert")
                    sensor_gyro.start()
                    sensor_accel.start()
                    sensor_gyro.active = true;
                    sensor_accel.active = true;
                    document.getElementById('sendenlive').style.visibility = "visible"
                    document.getElementById('sendenoffline').style.visibility = "hidden"
                }
            } else {
                window.location.href = '/'
            }
        } else {
            document.getElementById('sendenlive').style.visibility = "hidden"
            document.getElementById('sendenoffline').style.visibility = "visible"
            disconnectMqtt()
            if (iOS() == true) {
                    console.log("iPhone, deactivated Mqtt")                   
                    // document.getElementById("debugger").innerHTML = "iPhone DETECTED, deactivating sensors"
                } else {
                    onsole.log("Android, deactivated Mqtt")
                    // sensor_gyro.active = false;
                    // sensor_accel.active = false;
                }     
        }
    });

    //////////////////////////////////////////////

    let sensor_gyro = new window.Gyroscope({frequency: 60});

    sensor_gyro.onreading = () => {
        
        var gyro_dict = { 
                        user: username,
                        sensor: "gyroscope",
                        oa: sensor_gyro.x,
                        ob: sensor_gyro.y,
                        og: sensor_gyro.z,
                        ts: sensor_gyro.timestamp,
                    };
        console.log(gyro_dict)
        message = new Paho.MQTT.Message(JSON.stringify(gyro_dict));
        message.destinationName = topic;
        client.send(message);
        document.getElementById("alpha").innerHTML = gyro_dict["oa"].toFixed(2);
		document.getElementById("beta").innerHTML = gyro_dict["ob"].toFixed(2);
		document.getElementById("gamma").innerHTML = gyro_dict["og"].toFixed(2);
    }

    sensor_gyro.onerror = e => {
        sensor_gyro.errorType = `Error: ${e.error.name}`;
        sensor_gyro.errorMessage = `Error message: ${e.error.message}`;        
    }

    sensor_gyro.onactivate = () => {
    }; 
    if (window.Gyroscope == undefined) {
        console.log("no Gyroscope");
    }
    else {
        console.log("Gyroscope found");
    }

    let sensor_accel = new window.Accelerometer({frequency: 60});

    // sensor_accel.start()

    sensor_accel.onreading = () => {
        var accel_dict = { 
                        user: username,
                        sensor: "accelerometer",
                        ax: sensor_accel.x,
                        ay: sensor_accel.y,
                        az: sensor_accel.z,
                        ts: sensor_accel.timestamp,   
                    }
        // document.getElementById("debugger2").innerHTML = JSON.stringify(accel_dict)
        message = new Paho.MQTT.Message(JSON.stringify(accel_dict));
        // document.getElementById("debugger3").innerHTML = message.payload
        message.destinationName = topic;
        client.send(message);
        document.getElementById("accel_x").innerHTML = accel_dict["ax"].toFixed(2);
		document.getElementById("accel_y").innerHTML = accel_dict["ay"].toFixed(2);
		document.getElementById("accel_z").innerHTML = accel_dict["az"].toFixed(2);
        document.getElementById("timestamp").innerHTML = accel_dict["ts"].toFixed(2);
    }

    sensor_accel.onerror = e => {
        sensor_accel.errorType = `Error: ${e.error.name}`;
        sensor_accel.errorMessage = `Error message: ${e.error.message}`;
        
    }

    sensor_accel.onactivate = () => {
    }; 
    if (window.Accelerometer == undefined) {
        console.log("no accelerometer");
    }
    else {
        console.log("accelerometer found");
    } 



</script>
<% include partials/footer.ejs %>
