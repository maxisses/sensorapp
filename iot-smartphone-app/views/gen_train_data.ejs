<!DOCTYPE html>
<html>
<head>
    <title>IBM Cloud Web Starter</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    This is the Gyroscope:
    <div id="container_gyro">
    </div>
    <br>
    <br>
    This is the Accelerometer:
    <div id="container_accel">
    </div>
    
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/paho-mqtt/1.0.1/mqttws31.min.js" type="text/javascript"></script>


<script>

    var LOCALIP = "<%= LOCALIP %>"
    var BROKER_SERVICE = "<%= BROKER_SERVICE %>"
    var username = "<%= USER %>"
    console.log(username)
    console.log(LOCALIP)
    console.log(BROKER_SERVICE)

    const hostlocal = LOCALIP 
    const hostremote = BROKER_SERVICE
    const topic = "smartphone/" + username
    const clientId = "FRONTENDWEBAPP"
    const port = 

     // Create a client instance
    client = new Paho.MQTT.Client(hostlocal, Number(9001), "MAXMITPAHOJS");

    // set callback handlers
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;

    // connect the client
    client.connect({onSuccess:onConnect, useSSL: true});

    // Create a client instance

  
/*     client = new Paho.MQTT.Client("fevhyi.messaging.internetofthings.ibmcloud.com", Number(443), "fevhyi:smartphone:112233445566");

    // set callback handlers
    client.onConnectionLost = onConnectionLost;
    client.onMessageArrived = onMessageArrived;

    var options = {
        userName: "use-token-auth",
        password: "banane123",
        timeout: 3,
        useSSL: true,
        //Gets Called if the connection has sucessfully been established
        onSuccess: onConnect,
        //Gets Called if the connection could not be established
        onFailure: function (message) {
            alert("Connection failed: " + message.errorMessage);
        }
    };

    // connect the client
    client.connect(options); */


    // called when the client connects
    function onConnect() {
    // Once a connection has been made, make a subscription and send a message.
        console.log("Connected!");
        client.subscribe(topic);
        // message = new Paho.MQTT.Message('{ "d": {"key1": "value1"} }');
        // message.destinationName = topic;
        // client.send(message);
    }

    // called when the client loses its connection
    function onConnectionLost(responseObject) {
        if (responseObject.errorCode !== 0) {
            console.log("onConnectionLost:"+responseObject.errorMessage);
        }
    }

    // called when a message arrives
    function onMessageArrived(message) {
        // console.log("onMessageArrived:"+message.payloadString);
    }

    function round(number, precision) {
            let factor = 10 ** precision;
            return Math.round(number * factor) / factor;
        }

    let sensor_gyro = new window.Gyroscope({frequency: 40});

    sensor_gyro.start()

    sensor_gyro.onreading = () => {
        // sensor_gyro.readingTimestamp = `timestamp: ${round(sensor.timestamp, 3)}`;
        const sensor_gyrodata = "Gyro X: " + sensor_gyro.x + "Gyro Y: "+ sensor_gyro.y + "Gyro Z: " + sensor_gyro.y + "timestamp: " + sensor_gyro.timestamp;
        var gyro_dict = { 
                        user: username,
                        sensor: "gyroscope",
                        oa: sensor_gyro.x,
                        ob: sensor_gyro.y,
                        og: sensor_gyro.z,
                        ts: sensor_gyro.timestamp    
                    };
        console.log(gyro_dict)
        message = new Paho.MQTT.Message(JSON.stringify(gyro_dict));
        message.destinationName = topic;
        client.send(message);
        document.getElementById("container_gyro").innerHTML = sensor_gyrodata;
    }

    sensor_gyro.onerror = e => {
        sensor_gyro.errorType = `Error: ${e.error.name}`;
        sensor_gyro.errorMessage = `Error message: ${e.error.message}`;
        
    }

    sensor_gyro.onactivate = () => {
    }; 
    if (window.Gyroscope == undefined) {
        console.log("no Gyroscope");
    }
    else {
        console.log("Gyroscope found");
    }

    let sensor_accel = new window.Accelerometer({frequency: 40});

    sensor_accel.start()

    sensor_accel.onreading = () => {
        const sensor_acceldata = "Acc X:" + round(sensor_accel.x, 3) + "Acc Y:"+ sensor_accel.y + "Acc Z:" + sensor_accel.y + "timestamp: " + sensor_accel.timestamp;
        var accel_dict = { 
                        user: username,
                        sensor: "accelerometer",
                        ax: sensor_accel.x,
                        ay: sensor_accel.y,
                        az: sensor_accel.z,
                        ts: sensor_accel.timestamp,    
                    }
        message = new Paho.MQTT.Message(JSON.stringify(accel_dict));
        message.destinationName = topic;
        client.send(message);
        document.getElementById("container_accel").innerHTML = sensor_acceldata;
    }

    sensor_accel.onerror = e => {
        sensor_accel.errorType = `Error: ${e.error.name}`;
        sensor_accel.errorMessage = `Error message: ${e.error.message}`;
        
    }

    sensor_accel.onactivate = () => {
    }; 
    if (window.Accelerometer == undefined) {
        console.log("no accelerometer");
    }
    else {
        console.log("accelerometer found");
    } 



</script>
</html>
